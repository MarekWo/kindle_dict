# kindle_dict\docker-compose.prod.yml

services:
  # Usługa Nginx jako reverse proxy
  nginx:
    image: nginx:1.25
    container_name: kindle_dict_nginx
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: always

  # Usługa Django
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    container_name: kindle_dict_web
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=kindle_dict.settings.prod
    restart: always
    command: gunicorn kindle_dict.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120

  # Baza danych PostgreSQL
  db:
    image: postgres:15
    container_name: kindle_dict_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: .env.prod
    environment:
      - POSTGRES_USER=kindle_dict_user
      - POSTGRES_PASSWORD=wIPO$#IO#^
      - POSTGRES_DB=kindle_dict
    restart: always

  # Redis do obsługi Celery
  redis:
    image: redis:7
    container_name: kindle_dict_redis
    restart: always

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    container_name: kindle_dict_celery
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=kindle_dict.settings.prod
      - DISPLAY=
      - WINEDEBUG=-all
      - WINEDLLOVERRIDES=mscoree,mshtml=
    # Użycie privileged mode może pomóc z instrukcjami uprzywilejowanymi
    privileged: true
    restart: always
    command: celery -A kindle_dict worker -l info --pool=solo --concurrency=1

  # Celery beat (do zaplanowanych zadań)
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.prod
    container_name: kindle_dict_celery_beat
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
      - celery
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=kindle_dict.settings.prod
    restart: always
    command: celery -A kindle_dict beat -l info

volumes:
  postgres_data:
  static_volume:
  media_volume:
